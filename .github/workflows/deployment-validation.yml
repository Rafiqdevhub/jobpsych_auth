name: Deployment Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "22"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
  JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
  CORS_ORIGINS: ${{ secrets.CORS_ORIGINS }}

jobs:
  validate-deployment:
    name: "Deployment Validation"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jobpsych_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jobpsych_test

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Build application
        run: npm run build

      - name: Start application for testing
        run: |
          npm run build
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 5000

      - name: Run health checks
        run: node scripts/health-check.js

      - name: Run deployment validation
        run: npm run validate:deployment
        env:
          NODE_ENV: test

      - name: Run performance benchmark
        run: npm run perf:benchmark

      - name: Run basic load test
        run: |
          timeout 60 artillery quick --count 20 --num 2 http://localhost:5000/api/auth/info || true

      - name: Generate test report
        run: |
          mkdir -p test-results
          npm run test:coverage -- --testResultsProcessor=jest-junit
          npm run test:e2e:playwright -- --output=test-results/playwright-report
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_id }}
          path: |
            test-results/
            coverage/
            performance-results/
            artillery-reports/

      - name: Deployment validation summary
        if: always()
        run: |
          echo "## Deployment Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "performance-results/deployment-validation-*.json" ]; then
            LATEST_REPORT=$(ls -t performance-results/deployment-validation-*.json | head -1)
            echo "### Latest Validation Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat $LATEST_REPORT | jq '.validations[] | {name: .name, success: .success, duration: .duration}' >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            echo "- Lines: ${LINES}%" >> $GITHUB_STEP_SUMMARY
            echo "- Functions: ${FUNCTIONS}%" >> $GITHUB_STEP_SUMMARY
            echo "- Branches: ${BRANCHES}%" >> $GITHUB_STEP_SUMMARY
            echo "- Statements: ${STATEMENTS}%" >> $GITHUB_STEP_SUMMARY
          fi

  load-testing:
    name: "Load Testing"
    runs-on: ubuntu-latest
    needs: validate-deployment
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jobpsych_loadtest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Artillery
        run: npm install -g artillery

      - name: Setup load test database
        run: |
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/jobpsych_loadtest

      - name: Start application for load testing
        run: |
          npm run build
          npm start &
          sleep 15
        env:
          NODE_ENV: test
          PORT: 5000

      - name: Run authentication load test
        run: npm run loadtest:auth
        continue-on-error: true

      - name: Run rate limit load test
        run: npm run loadtest:rate-limit
        continue-on-error: true

      - name: Run mixed workload test
        run: npm run loadtest:mixed
        continue-on-error: true

      - name: Generate load test report
        run: npm run loadtest:report

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ github.run_id }}
          path: artillery-reports/

      - name: Load test summary
        if: always()
        run: |
          echo "## Load Testing Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "artillery-reports" ]; then
            echo "### Artillery Reports Generated" >> $GITHUB_STEP_SUMMARY
            ls -la artillery-reports/ >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    name: "Security Scan"
    runs-on: ubuntu-latest
    needs: validate-deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run security scan with Snyk (if configured)
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            npm install -g snyk
            snyk test --severity-threshold=medium || true
          else
            echo "Snyk not configured, skipping security scan"
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Check for secrets in code
        run: |
          if command -v gitleaks &> /dev/null; then
            gitleaks detect --verbose --redact --config .gitleaks.toml . || true
          else
            echo "Gitleaks not installed, checking for common secrets patterns..."
            grep -r "password\|secret\|key\|token" --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=dist . || echo "No obvious secrets found"
          fi
        continue-on-error: true

  deploy-staging:
    name: "Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [validate-deployment, load-testing, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          # Add your staging deployment commands here
          # For example: serverless deploy, docker push, etc.
          echo "Staging deployment completed"

  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: [validate-deployment, load-testing, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Final production validation
        run: |
          echo "üîç Running final production validation checks"
          # Add any final production-specific checks here

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          # Add your production deployment commands here
          # For example: serverless deploy, docker push, etc.
          echo "Production deployment completed"
