name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env << EOF
          NODE_ENV=test
          DATABASE_URL=${{ secrets.NEON_DATABASE_URL }}
          JWT_ACCESS_SECRET=test-access-secret-key-for-github-actions-testing-minimum-32-chars
          JWT_REFRESH_SECRET=test-refresh-secret-key-for-github-actions-testing-minimum-32-chars
          JWT_ACCESS_EXPIRES_IN=15m
          JWT_REFRESH_EXPIRES_IN=7d
          CORS_ORIGINS=http://localhost:3000,http://localhost:3001
          PORT=5000
          EOF

      - name: TypeScript compilation check
        run: npm run build

      - name: Run database migrations
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

      - name: Run full test suite with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Check for TypeScript errors
        run: npm run build

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit for production dependencies
        run: npm audit --production --audit-level=high

      - name: Check for critical vulnerabilities in all dependencies
        run: npm audit --audit-level=critical --dry-run || echo "⚠️ Non-critical vulnerabilities found - review in development"

      - name: Generate security report
        run: |
          echo "## Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "Production dependencies audit:" >> $GITHUB_STEP_SUMMARY
          npm audit --production --audit-level=moderate --json > prod-audit.json || true
          if [ -s prod-audit.json ]; then
            echo "✅ Production dependencies are secure" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Review production dependencies" >> $GITHUB_STEP_SUMMARY
          fi

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Test built application starts
        run: |
          npm run build
          timeout 10s npm start || exit 0
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
          JWT_ACCESS_SECRET: test-secret-key-minimum-32-characters
          JWT_REFRESH_SECRET: test-refresh-secret-key-minimum-32-chars

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check package-lock.json
        run: npm ci --dry-run

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create test environment
        run: |
          cat > .env << EOF
          NODE_ENV=test
          DATABASE_URL=${{ secrets.NEON_DATABASE_URL }}
          JWT_ACCESS_SECRET=test-access-secret-key-for-performance-testing-minimum-32-chars
          JWT_REFRESH_SECRET=test-refresh-secret-key-for-performance-testing-minimum-32-chars
          PORT=5000
          EOF

      - name: Start application in background
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:5000/ || exit 1
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, lint, security, build-test]
    if: always()

    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ]; then
            echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed!" >> $GITHUB_STEP_SUMMARY
          fi
